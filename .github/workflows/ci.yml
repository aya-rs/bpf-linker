name: CI

on:
  push:
    branches:
      - main
      - 'feature/**'
  pull_request:
    branches:
      - main
      - 'feature/**'
  schedule:
    - cron: 00 4 * * *

env:
  CARGO_TERM_COLOR: always

jobs:
  llvm:
    uses: ./.github/workflows/llvm.yml

  lint-stable:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: clippy, rust-src

      - name: Run clippy
        run: cargo clippy --features llvm-21,llvm-sys-21/no-llvm-linking --all-targets --workspace -- --deny warnings

  lint-nightly:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          components: rustfmt, rust-src

      - name: Check formatting
        run: cargo fmt --all -- --check

  build:
    # We don't use ubuntu-latest because we care about the apt packages available.
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - rust: 1.86.0
            llvm-version: 19
            llvm-from: apt
            exclude-features: default,llvm-20,llvm-21,rust-llvm-20,rust-llvm-21
          - rust: 1.89.0
            llvm-version: 20
            llvm-from: apt
            exclude-features: default,llvm-19,llvm-21,rust-llvm-19,rust-llvm-21
          - rust: beta
            llvm-version: 21
            llvm-from: apt
            exclude-features: default,llvm-19,llvm-20,rust-llvm-19,rust-llvm-20
          - rust: nightly
            llvm-version: 21
            llvm-from: apt
            exclude-features: llvm-19,llvm-20,rust-llvm-19,rust-llvm-20
          - rust: nightly
            llvm-version: 21
            llvm-from: source
            exclude-features: llvm-19,llvm-20,rust-llvm-19,rust-llvm-20
    name: rustc=${{ matrix.rust }} llvm-version=${{ matrix.llvm-version }} llvm-from=${{ matrix.llvm-from }}
    needs: llvm

    env:
      RUST_BACKTRACE: full

    steps:
      - uses: actions/checkout@v5

      - name: Install Rust ${{ matrix.rust }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rust-src

      - name: Check (default features, no system LLVM)
        run: cargo check

      - name: Build (default features, no system LLVM)
        run: cargo build

      - name: Install btfdump
        run: cargo install btfdump

      - name: Install prerequisites
        # ubuntu-22.04 comes with clang 13-15[0]; support for signed and 64bit
        # enum values was added in clang 15[1] which isn't in `$PATH`.
        #
        # gcc-multilib provides at least <asm/types.h> which is referenced by libbpf.
        #
        # [0] https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2204-Readme.md
        #
        # [1] https://github.com/llvm/llvm-project/commit/dc1c43d
        run: |
          set -euxo pipefail
          sudo apt update
          sudo apt -y install gcc-multilib
          echo /usr/lib/llvm-15/bin >> $GITHUB_PATH

      - name: Install LLVM
        if: matrix.llvm-from == 'apt'
        run: |
          set -euxo pipefail
          wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
          echo -e deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-${{ matrix.llvm-version }} main | sudo tee /etc/apt/sources.list.d/llvm.list

          sudo apt update
          # TODO(vadorovsky): Remove the requirement of libpolly.
          #
          # Packages from apt.llvm.org are being built all at once, with one
          # cmake build with superset of options, then different binaries and
          # libraries are being included in different packages.
          #
          # That results in `llvm-config --libname --link-static` mentioning
          # libpolly, even if it's not installed. The output of that command is
          # being used in build.rs of llvm-sys, so building llvm-sys on such
          # system is complaining about lack of libpolly.
          #
          # Hopefully that nightmare goes away once we switch to binstalls and
          # ditch the system LLVM option.
          sudo apt -y install llvm-${{ matrix.llvm-version }}-dev libpolly-${{ matrix.llvm-version }}-dev
          echo /usr/lib/llvm-${{ matrix.llvm-version }}/bin >> $GITHUB_PATH

      - name: Restore LLVM
        if: matrix.llvm-from == 'source'
        uses: actions/cache/restore@v4
        with:
          path: llvm-install
          key: ${{ needs.llvm.outputs.cache-key }}
          fail-on-cache-miss: true

      - name: Add LLVM to PATH && LD_LIBRARY_PATH
        if: matrix.llvm-from == 'source'
        run: |
          set -euxo pipefail
          echo "${{ github.workspace }}/llvm-install/bin" >> $GITHUB_PATH
          # LD_LIBRARY_PATH is needed because we're going to link everything dynamically below. This
          # doesn't affect behavior, but greatly reduces disk usage.
          echo "LD_LIBRARY_PATH=${{ github.workspace }}/llvm-install/lib" >> $GITHUB_ENV

      # llvm-sys discovers link flags at build script time; these are cached by cargo. The cached
      # flags may be incorrect when the cache is reused across LLVM versions.
      - name: Bust llvm-sys cache
        run: |
          set -euxo pipefail
          cargo clean -p llvm-sys
          cargo clean -p llvm-sys --release

      - uses: taiki-e/install-action@cargo-hack

      - name: Check
        run: |
          cargo hack check --feature-powerset \
            --exclude-features ${{ matrix.exclude-features }} \
            --features llvm-${{ matrix.llvm-version }}

      - name: Build
        run: |
          cargo hack build --feature-powerset \
            --exclude-features ${{ matrix.exclude-features }} \
            --features llvm-${{ matrix.llvm-version }}

      # Toolchains provided by rustup include standard library artifacts
      # only for Tier 1 targets, which do not include BPF targets.
      # The default workaround is to use the `rustc-build-sysroot` feature,
      # which builds a custom sysroot with the required BPF standard library
      # before running compiler tests.
      #
      # `RUSTC_BOOTSTRAP` is needed to make rustc-build-sysroot work on stable
      # Rust.
      - name: Test (sysroot built on demand)
        env:
          RUSTC_BOOTSTRAP: 1
        run: |
          cargo hack test --feature-powerset \
            --exclude-features ${{ matrix.exclude-features }} \
            --features llvm-${{ matrix.llvm-version }},rustc-build-sysroot

      # To make things easier for package maintainers, the step of building
      # a custom sysroot can be skipped by omitting the `rustc-build-sysroot`
      # feature. In that case, the sysroot provided by the current toolchain
      # is expected to already contain the prebuilt standard library.
      # Test this configuration by prebuilding the BPF standard library
      # manually.
      #
      # `RUSTC_BOOTSTRAP` is needed to make `xtask build-std` work on stable
      # Rust.
      - name: Test (prebuilt BPF standard library)
        env:
          RUSTC_BOOTSTRAP: 1
        run: |
          cargo xtask build-std
          cargo hack test --feature-powerset \
            --exclude-features ${{ matrix.exclude-features }},rustc-build-sysroot \
            --features llvm-${{ matrix.llvm-version }}

      - uses: actions/checkout@v5
        if: matrix.rust == 'nightly'
        with:
          repository: aya-rs/aya
          path: aya
          submodules: recursive

      - name: Install
        if: matrix.rust == 'nightly'
        run: cargo install --path . --no-default-features --features llvm-${{ matrix.llvm-version }}

      - name: Run aya integration tests
        if: matrix.rust == 'nightly'
        working-directory: aya
        run: cargo xtask integration-test local

      - name: Report disk usage (final)
        if: always()
        run: |
          set -euo pipefail

          label=final
          workspace=${GITHUB_WORKSPACE:-$PWD}

          echo "::group::Disk usage snapshot (${label}) – filesystems"
          df -h
          echo "::endgroup::"

          report_dir() {
            local dir="$1"
            local depth="$2"

            [[ -d "$dir" ]] || return

            echo "::group::Disk usage snapshot (${label}) – ${dir}"
            du -x -BM -s "$dir" | awk '{ printf("total: %s\t%s\n", $1, $2) }'
            du -x -BM --max-depth="$depth" "$dir" 2>/dev/null | sort -nr | head -n 20
            echo "::endgroup::"
          }

          report_dir "$workspace" 2
          report_dir "$HOME/.cargo" 2
          report_dir "$HOME/.rustup" 1
          report_dir /tmp 1
          report_dir /var/cache/apt/archives 1
