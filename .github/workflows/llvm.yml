name: LLVM

on:
  workflow_call:
    outputs:
      cache-key-aarch64-apple-darwin:
        value: ${{ jobs.llvm.outputs.cache-key-aarch64-apple-darwin }}
      cache-key-x86_64-apple-darwin:
        value: ${{ jobs.llvm.outputs.cache-key-x86_64-apple-darwin }}
      cache-key-aarch64-linux-gnu:
        value: ${{ jobs.llvm.outputs.cache-key-aarch64-linux-gnu }}
      cache-key-riscv64-linux-gnu:
        value: ${{ jobs.llvm.outputs.cache-key-riscv64-linux-gnu }}
      cache-key-x86_64-linux-gnu:
        value: ${{ jobs.llvm.outputs.cache-key-x86_64-linux-gnu }}

jobs:
  llvm:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-13
            os-name: macOS
            processor: arm64
            system: Darwin
            target: aarch64-apple-darwin
          - os: macos-13
            os-name: macOS
            processor: x86_64
            system: Darwin
            target: x86_64-apple-darwin
          - os: ubuntu-22.04
            os-name: Linux
            packages: gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross
            processor: aarch64
            system: Linux
            target: aarch64-linux-gnu
          - os: ubuntu-22.04
            os-name: Linux
            packages: gcc-riscv64-linux-gnu g++-riscv64-linux-gnu libc6-dev-riscv64-cross
            processor: riscv64
            system: Linux
            target: riscv64-linux-gnu
          - os: ubuntu-22.04
            os-name: Linux
            packages:
            processor: x86_64
            system: Linux
            target: x86_64-linux-gnu
    name: llvm ${{ matrix.target }}
    outputs:
      cache-key-aarch64-apple-darwin: ${{ steps.cache-key.outputs.cache-key-aarch64-apple-darwin }}
      cache-key-x86_64-apple-darwin: ${{ steps.cache-key.outputs.cache-key-x86_64-apple-darwin }}
      cache-key-aarch64-linux-gnu: ${{ steps.cache-key.outputs.cache-key-aarch64-linux-gnu }}
      cache-key-riscv64-linux-gnu: ${{ steps.cache-key.outputs.cache-key-riscv64-linux-gnu }}
      cache-key-x86_64-linux-gnu: ${{ steps.cache-key.outputs.cache-key-x86_64-linux-gnu }}
    steps:
      - id: ls-remote
        run: |
          set -euxo pipefail
          value=$(git ls-remote https://github.com/aya-rs/llvm-project.git refs/heads/rustc/19.1-2024-09-17 | cut -f1)
          echo "sha=$value" >> "$GITHUB_OUTPUT"

      - id: cache-key
        run: echo "cache-key-${{ matrix.target }}=llvm-${{ matrix.target }}-${{ steps.ls-remote.outputs.sha }}-1" >> "$GITHUB_OUTPUT"

      - name: Cache
        id: cache-llvm
        uses: actions/cache@v4
        with:
          path: llvm-install
          key: ${{ steps.cache-key.outputs[format('cache-key-{0}', matrix.target)] }}
          lookup-only: true

      - name: Free disk space
        if: runner.os == 'Linux' && steps.cache-llvm.outputs.cache-hit != 'true'
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          swap-storage: false

      - name: Install Tools
        if: runner.os == 'Linux' && steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          set -euxo pipefail
          wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | \
            gpg --dearmor - | \
            sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
          echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ focal main' | \
            sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null

          sudo apt update
          sudo apt -y install \
            cmake \
            ninja-build \
            ${{ matrix.packages }}

      - name: Install Tools
        if: runner.os == 'macOS' && steps.cache-llvm.outputs.cache-hit != 'true'
        # TODO(vadorovsky): There are LLVM binary tarballs for macOS on GitHub,
        # but unfortunately they don't work correctly[0]. Once the issue is
        # fixed, we could run the next step ("Install LLVM") on all systems.
        #
        # For now, install LLVM from homebrew.
        #
        # [0] https://github.com/llvm/llvm-project/issues/92260
        run: |
          set -euxo pipefail
          brew update
          brew install llvm ninja
          echo $(brew --prefix)/opt/llvm/bin >> $GITHUB_PATH

      - name: Install LLVM
        if: runner.os == 'Linux' && steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          set -euxo pipefail
          llvm_tarball_url=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/llvm/llvm-project/releases | jq -r \
            'first | .assets | map(select(.name |
             endswith("${{ matrix.os-name }}-X64.tar.xz"))) | first |
             .browser_download_url')
          mkdir -p /tmp/llvm-upstream
          wget -q -O - $llvm_tarball_url | tar -xJ --strip-components 1 \
            -C /tmp/llvm-upstream
          echo /tmp/llvm-upstream/bin >> $GITHUB_PATH

      - name: Checkout LLVM Source
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: aya-rs/llvm-project
          ref: ${{ steps.ls-remote.outputs.sha }}
          path: llvm-project

      - name: Configure LLVM
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          set -euxo pipefail
          cmake \
            -S llvm-project/llvm \
            -B llvm-build \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DCMAKE_ASM_COMPILER=clang \
            -DCMAKE_ASM_COMPILER_TARGET="${{ matrix.target }}" \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_C_COMPILER_TARGET="${{ matrix.target }}" \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DCMAKE_CXX_COMPILER_TARGET="${{ matrix.target }}" \
            -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/llvm-install" \
            -DCMAKE_SYSTEM_NAME="${{ matrix.system }}" \
            -DCMAKE_SYSTEM_PROCESSOR="${{ matrix.processor }}" \
            -DLLVM_BUILD_LLVM_DYLIB=ON \
            -DLLVM_ENABLE_ASSERTIONS=ON \
            -DLLVM_ENABLE_PROJECTS= \
            -DLLVM_ENABLE_RUNTIMES= \
            -DLLVM_HOST_TRIPLE="${{ matrix.target }}" \
            -DLLVM_INSTALL_UTILS=ON \
            -DLLVM_LINK_LLVM_DYLIB=ON \
            -DLLVM_TARGETS_TO_BUILD=BPF \
            -DLLVM_USE_LINKER=lld

      - name: Install LLVM
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: cmake --build llvm-build --target install
