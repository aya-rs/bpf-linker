name: LLVM

on:
  workflow_call:
    outputs:
      cache-key:
        value: ${{ jobs.llvm.outputs.cache-key }}

jobs:
  llvm:
    runs-on: ubuntu-22.04
    container:
      image: alpine:3.20
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-musl
    name: llvm
    outputs:
      cache-key: ${{ steps.cache-key.outputs.cache-key }}
    steps:
      - name: Install dependencies
        run: |
          set -euxo pipefail
          apk update
          apk add bash curl git libgcc jq musl-dev tar xz

      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly

      # We retrieve the commit hashes of two repositories:
      #
      # - rust-lang/rust - the Rust monorepo. Rust CI is using commit hashes
      #   from the monorepo for annotating LLVM tarballs. We use it to download
      #   the tarball.
      # - aya-rs/llvm-project - which is our fork of LLVM, kept in sync with
      #   rust-lang/llvm-project. We use it in case we can't download LLVM
      #   toolchain from Rust CI.
      - id: ls-remote
        run: |
          set -euxo pipefail
          # Get the partial SHA from Rust nightly.
          rustc_sha=$(rustc +nightly --version | grep -oE '[a-f0-9]{7,40}')
          # Get the full SHA from GitHub.
          rustc_sha=$(curl -s https://api.github.com/repos/rust-lang/rust/commits/$rustc_sha | jq -r '.sha')
          aya_llvm_sha=$(git ls-remote https://github.com/aya-rs/llvm-project.git refs/heads/rustc/19.1-2024-07-30 | cut -f1)
          echo "rustc-sha=$rustc_sha" >> "$GITHUB_OUTPUT"
          echo "aya-llvm-sha=$aya_llvm_sha" >> "$GITHUB_OUTPUT"

      - id: cache-key
        run: echo "cache-key=llvm-${{ matrix.target }}-${{ steps.ls-remote.outputs.rustc-sha }}-1" >> "$GITHUB_OUTPUT"

      - name: Cache
        id: cache-llvm
        uses: actions/cache@v4
        with:
          path: llvm-install
          key: ${{ steps.cache-key.outputs.cache-key }}
          lookup-only: true

      - name: Download LLVM from Rust CI
        id: download-llvm
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          set -euxo pipefail
          mkdir -p llvm-install
          wget -q -O - https://ci-artifacts.rust-lang.org/rustc-builds/${{ steps.ls-remote.outputs.rustc-sha }}/rust-dev-nightly-${{ matrix.target }}.tar.xz | \
            tar -xJ --strip-components 2 -C llvm-install

      - name: Install Tools
        if: steps.cache-llvm.outputs.cache-hit != 'true' && steps.download-llvm.outcome != 'success'
        run: |
          set -euxo pipefail
          wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | \
            gpg --dearmor - | \
            sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
          echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ focal main' | \
            sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null

          sudo apt update
          sudo apt -y install cmake ninja-build clang lld

      - name: Checkout LLVM Source
        if: steps.cache-llvm.outputs.cache-hit != 'true' && steps.download-llvm.outcome != 'success'
        uses: actions/checkout@v4
        with:
          repository: aya-rs/llvm-project
          ref: ${{ steps.ls-remote.outputs.aya-llvm-sha }}
          path: llvm-project

      - name: Configure LLVM
        if: steps.cache-llvm.outputs.cache-hit != 'true' && steps.download-llvm.outcome != 'success'
        run: |
          set -euxo pipefail
          cmake \
            -S llvm-project/llvm \
            -B llvm-build \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/llvm-install" \
            -DLLVM_BUILD_LLVM_DYLIB=ON \
            -DLLVM_ENABLE_ASSERTIONS=ON \
            -DLLVM_ENABLE_PROJECTS= \
            -DLLVM_ENABLE_RUNTIMES= \
            -DLLVM_INSTALL_UTILS=ON \
            -DLLVM_LINK_LLVM_DYLIB=ON \
            -DLLVM_TARGETS_TO_BUILD=BPF \
            -DLLVM_USE_LINKER=lld

      - name: Install LLVM
        if: steps.cache-llvm.outputs.cache-hit != 'true' && steps.download-llvm.outcome != 'success'
        env:
          # Create symlinks rather than copies to conserve disk space. At the time of this writing,
          # GitHub-hosted runners have 14GB of SSD space
          # (https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources).
          #
          # Since the LLVM build creates a bunch of symlinks (and this setting does not turn those
          # into symlinks-to-symlinks), use absolute symlinks so we can distinguish the two cases.
          CMAKE_INSTALL_MODE: ABS_SYMLINK
        run: cmake --build llvm-build --target install

      - name: Rewrite LLVM Symlinks
        if: steps.cache-llvm.outputs.cache-hit != 'true' && steps.download-llvm.outcome != 'success'
        # Move targets over the symlinks that point to them.
        #
        # This whole dance would be simpler if CMake supported CMAKE_INSTALL_MODE=MOVE.
        run: |
          set -euxo pipefail
          find llvm-install -type l -execdir sh -eux -c '
            for link in "$@"; do
              target=$(readlink "$link")
              case $target in
                /*) mv "$target" "$link" ;;
              esac
            done
          ' sh {} +
